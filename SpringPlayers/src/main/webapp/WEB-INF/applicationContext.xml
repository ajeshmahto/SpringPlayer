<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
   xmlns:tx="http://www.springframework.org/schema/tx"
   xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xsi:schemaLocation="
      http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans.xsd
 	  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
      http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
 
    
   <!-- Scan for  transaction-based resources -->
   	<context:component-scan base-package="edu.com.mum.serviceImpl" />
  	<context:component-scan base-package="edu.com.mum.domain" />
   	<context:component-scan base-package="edu.com.mum.repository" />
    
   <tx:annotation-driven transaction-manager="transactionManager"/>
 
 
 
 <!-- The jpa:repositories scans for all interfaces that extend  Repository and 
      creates implementations for use at runtime.  -->
 <jpa:repositories base-package="edu.com.mum.repository" />
 
 
 <!-- Creates a JPA EntityManagerFactory according to JPA's standard container bootstrap contract.
      This is the most powerful way to set up a shared JPA EntityManagerFactory in a Spring application context;
  -->
   <bean id="entityManager" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <property name="dataSource" ref="dataSource" />
      <property name="packagesToScan" value="edu.com.mum.domain" />
     
     <!--  provider-specific initialization,etc. -->
      <property name="jpaVendorAdapter">
         <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
      </property>
      <property name="jpaProperties">
         <props>
 <!-- 
    validate: validate the schema, makes no changes to the database.
    update: update the schema.
    create: creates the schema, destroying previous data.
    create-drop: drop the schema at the end of the session.
   These options intended to be developers tools and not to facilitate any production level databases 
            <prop key="hibernate.hbm2ddl.auto">create-drop</prop>
-->
            <!-- hibernate.dialect. This property makes Hibernate 
                 generate the appropriate SQL for the chosen database. -->
            <prop key="hibernate.hbm2ddl.auto">create</prop>
            <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
            <prop key="connection.pool_size">1</prop>
				<prop key="hibernate.show_sql">true</prop>
            
         </props>
      </property>
   </bean>
 

 
 <!-- database configuration -->
     <!--bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url" value="jdbc:h2:tcp://localhost/~/JPA;DB_CLOSE_DELAY=-1;MODE=MySQL " />
    </bean-->
 <!-- ;INIT=runscript from 'classpath:create.sql'\;runscript from 'classpath:populate.sql' -->

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/springplayers" />
		<property name="username" value="spring" />
		<property name="password" value="spring" />
	</bean>




   <bean id="persistenceExceptionTranslationPostProcessor"
      class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
 
</beans>
